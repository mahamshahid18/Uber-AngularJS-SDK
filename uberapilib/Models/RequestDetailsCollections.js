/**
 * UberAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of RequestDetailsCollections
 *
 * @constructor
 */
angular.module('UberAPILib')
    .factory('RequestDetailsCollections', ['BaseModel', RequestDetailsCollectionsModel]);

    function RequestDetailsCollectionsModel(BaseModel) {
        var RequestDetailsCollections = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.driver = this.getValue(obj.driver);
            this.eta = this.getValue(obj.eta);
            this.location = this.getValue(obj.location);
            this.requestId = this.getValue(obj.requestId);
            this.status = this.getValue(obj.status);
            this.surgeMultiplier = this.getValue(obj.surgeMultiplier);
            this.vehicle = this.getValue(obj.vehicle);
        };

        RequestDetailsCollections.prototype = new BaseModel();
        RequestDetailsCollections.prototype.constructor = RequestDetailsCollections;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        RequestDetailsCollections.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'driver', realName: 'driver', type: 'Driver' },
                { name: 'eta', realName: 'eta' },
                { name: 'location', realName: 'location', type: 'Location' },
                { name: 'requestId', realName: 'request_id' },
                { name: 'status', realName: 'status' },
                { name: 'surgeMultiplier', realName: 'surge_multiplier' },
                { name: 'vehicle', realName: 'vehicle', type: 'Vehicle' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        RequestDetailsCollections.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The object that contains driver details.
         *
         * @return {Driver}
         */
        RequestDetailsCollections.prototype.getDriver = function () {
            return this.driver;
        };
    
        /**
         * Setter for Driver
         * 
         * @param {Driver} value 
         */
        RequestDetailsCollections.prototype.setDriver = function (value) {
            this.driver = value;
        };
    
        /**
         * The estimated time of vehicle arrival in minutes.
         *
         * @return {int}
         */
        RequestDetailsCollections.prototype.getEta = function () {
            return this.eta;
        };
    
        /**
         * Setter for Eta
         * 
         * @param {int} value 
         */
        RequestDetailsCollections.prototype.setEta = function (value) {
            this.eta = value;
        };
    
        /**
         * The object that contains the location information of the vehicle and driver.
         *
         * @return {Location}
         */
        RequestDetailsCollections.prototype.getLocation = function () {
            return this.location;
        };
    
        /**
         * Setter for Location
         * 
         * @param {Location} value 
         */
        RequestDetailsCollections.prototype.setLocation = function (value) {
            this.location = value;
        };
    
        /**
         * The unique ID of the Request.
         *
         * @return {string}
         */
        RequestDetailsCollections.prototype.getRequestId = function () {
            return this.requestId;
        };
    
        /**
         * Setter for RequestId
         * 
         * @param {string} value 
         */
        RequestDetailsCollections.prototype.setRequestId = function (value) {
            this.requestId = value;
        };
    
        /**
         * The status of the Request indicating state.
         *
         * @return {string}
         */
        RequestDetailsCollections.prototype.getStatus = function () {
            return this.status;
        };
    
        /**
         * Setter for Status
         * 
         * @param {string} value 
         */
        RequestDetailsCollections.prototype.setStatus = function (value) {
            this.status = value;
        };
    
        /**
         * The surge pricing multiplier used to calculate the increased price of a Request. A multiplier of 1.0
         * means surge pricing is not in effect.
         *
         * @return {double}
         */
        RequestDetailsCollections.prototype.getSurgeMultiplier = function () {
            return this.surgeMultiplier;
        };
    
        /**
         * Setter for SurgeMultiplier
         * 
         * @param {double} value 
         */
        RequestDetailsCollections.prototype.setSurgeMultiplier = function (value) {
            this.surgeMultiplier = value;
        };
    
        /**
         * The object that contains vehicle details.
         *
         * @return {Vehicle}
         */
        RequestDetailsCollections.prototype.getVehicle = function () {
            return this.vehicle;
        };
    
        /**
         * Setter for Vehicle
         * 
         * @param {Vehicle} value 
         */
        RequestDetailsCollections.prototype.setVehicle = function (value) {
            this.vehicle = value;
        };
    
        return RequestDetailsCollections;
    }

}(angular));
