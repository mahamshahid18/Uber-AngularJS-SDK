/**
 * UberAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of RequestBody
 *
 * @constructor
 */
angular.module('UberAPILib')
    .factory('RequestBody', ['BaseModel', RequestBodyModel]);

    function RequestBodyModel(BaseModel) {
        var RequestBody = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.endLatitude = this.getValue(obj.endLatitude);
            this.endLongitude = this.getValue(obj.endLongitude);
            this.productId = this.getValue(obj.productId);
            this.startLatitude = this.getValue(obj.startLatitude);
            this.startLongitude = this.getValue(obj.startLongitude);
            this.surgeConfirmationId = this.getValue(obj.surgeConfirmationId);
        };

        RequestBody.prototype = new BaseModel();
        RequestBody.prototype.constructor = RequestBody;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        RequestBody.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'endLatitude', realName: 'end_latitude' },
                { name: 'endLongitude', realName: 'end_longitude' },
                { name: 'productId', realName: 'product_id' },
                { name: 'startLatitude', realName: 'start_latitude' },
                { name: 'startLongitude', realName: 'start_longitude' },
                { name: 'surgeConfirmationId', realName: 'surge_confirmation_id' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        RequestBody.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The final or destination latitude.
         *
         * @return {double}
         */
        RequestBody.prototype.getEndLatitude = function () {
            return this.endLatitude;
        };
    
        /**
         * Setter for EndLatitude
         * 
         * @param {double} value 
         */
        RequestBody.prototype.setEndLatitude = function (value) {
            this.endLatitude = value;
        };
    
        /**
         * The final or destination longitude.
         *
         * @return {double}
         */
        RequestBody.prototype.getEndLongitude = function () {
            return this.endLongitude;
        };
    
        /**
         * Setter for EndLongitude
         * 
         * @param {double} value 
         */
        RequestBody.prototype.setEndLongitude = function (value) {
            this.endLongitude = value;
        };
    
        /**
         * The unique ID of the product being requested.
         *
         * @return {string}
         */
        RequestBody.prototype.getProductId = function () {
            return this.productId;
        };
    
        /**
         * Setter for ProductId
         * 
         * @param {string} value 
         */
        RequestBody.prototype.setProductId = function (value) {
            this.productId = value;
        };
    
        /**
         * The beginning or "pickup" latitude.
         *
         * @return {double}
         */
        RequestBody.prototype.getStartLatitude = function () {
            return this.startLatitude;
        };
    
        /**
         * Setter for StartLatitude
         * 
         * @param {double} value 
         */
        RequestBody.prototype.setStartLatitude = function (value) {
            this.startLatitude = value;
        };
    
        /**
         * The beginning or "pickup" longitude.
         *
         * @return {double}
         */
        RequestBody.prototype.getStartLongitude = function () {
            return this.startLongitude;
        };
    
        /**
         * Setter for StartLongitude
         * 
         * @param {double} value 
         */
        RequestBody.prototype.setStartLongitude = function (value) {
            this.startLongitude = value;
        };
    
        /**
         * The unique identifier of the surge session for a user. Required when returned from a 409 Conflict
         * response on previous POST attempt.
         *
         * @return {string}
         */
        RequestBody.prototype.getSurgeConfirmationId = function () {
            return this.surgeConfirmationId;
        };
    
        /**
         * Setter for SurgeConfirmationId
         * 
         * @param {string} value 
         */
        RequestBody.prototype.setSurgeConfirmationId = function (value) {
            this.surgeConfirmationId = value;
        };
    
        return RequestBody;
    }

}(angular));
