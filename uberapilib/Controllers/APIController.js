/**
  * UberAPILib
  *
  * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
  */

;(function (angular) {
'use strict';

angular.module('UberAPILib')
    .factory('APIController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', 'BaseController', APIController
    ]);

    function APIController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Get product details w.r.t id
             *
             * @param {string} productId Unique identifier representing a specific product for a given latitude &
             * longitude. For example, uberX in San Francisco will have a different
             * product_id than uberX in Los Angeles.
             *
             * @return {promise<Product>}
             */
            getProductDetailByID: function (productId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (productId === null || productId === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `productId` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/products/{product_id}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'product_id': productId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'Product');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    }_deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * The User Profile endpoint returns information about the Uber user that has authorized with the
             * application.
             *
             *
             * @return {promise<User Profile>}
             */
            getUserProfile: function () {

                //Create promise to return
                var _deffered = $q.defer();
                

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/me';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'UserProfile');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types: ?Unacceptable content type. Request resource as:' +
                                'application/json, etc.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The Products endpoint returns information about the Uber products offered at a given location. The
             * response includes the display name and other details about each product, and lists the products in
             * the proper display order.
             *
             * @param {double} latitude Latitude component of location.
             * @param {double} longitude Longitude component of location.
             *
             * @return {promise<Product Collection>}
             */
            getProductsTypes: function (latitude, longitude) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (latitude === null || latitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `latitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (longitude === null || longitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `longitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/products';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'latitude': latitude,
                    'longitude': longitude
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'ProductCollection');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types: ?Unacceptable content type. Request resource as:' +
                                'application/json, etc.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Get the real time status of an ongoing trip that was created using the Ride Request endpoint.
             *
             * @param {string} requestId TODO: type description here
             *
             * @return {promise<Request Details Collections>}
             */
            getRequestDetails: function (requestId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (requestId === null || requestId === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `requestId` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/requests/{request_id}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'request_id': requestId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'RequestDetailsCollections');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types, such as ?Unacceptable content type. Request resource as:' +
                                'application/json.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 409) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'A conflict needs to be resolved before the request can be made.',
                            errorCode: 409,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content or there are issues with a rider\'s user account.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will
             * include pickup locations and times, dropoff locations and times, the distance of past requests, and
             * information about which products were requested.
             *
             * @param {int} limit Number of items to return for pagging
             * @param {int} offset Page offset for pagging
             *
             * @return {promise<User Activity>}
             */
            getUserActivityV11: function (limit, offset) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (limit === null || limit === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `limit` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (offset === null || offset === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `offset` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1.1/history';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'limit': limit,
                    'offset': offset
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'UserActivity');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types: ?Unacceptable content type. Request resource as:' +
                                'application/json, etc.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the
             * responses expressed as integers in seconds. We recommend that this endpoint be called every minute to
             * provide the most accurate, up-to-date ETAs.
             *
             * @param {double} startLatitude Latitude component of the start location
             * @param {double} startLongitude Longitude component of the start location
             * @param {string|null} customerUuid [Optional] The customer id interested in estimate
             * @param {string|null} productId [Optional] Id of the requested product
             *
             * @return {promise<Time Estimate Collection>}
             */
            getTimeEstimates: function (startLatitude, startLongitude, customerUuid, productId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (startLatitude === null || startLatitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLatitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (startLongitude === null || startLongitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLongitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/estimates/time';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'start_latitude': startLatitude,
                    'start_longitude': startLongitude,
                    'customer_uuid': customerUuid,
                    'product_id': productId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'TimeEstimateCollection');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types: ?Unacceptable content type. Request resource as:' +
                                'application/json, etc.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The Price Estimates endpoint returns an estimated price range for each product offered at a given
             * location. The price estimate is provided as a formatted string with the full price range and the
             * localized currency symbol.
             *
             * @param {double} endLatitude Latitude component of end location.
             * @param {double} endLongitude Longitude component of end location.
             * @param {double} startLatitude Latitude component of start location.
             * @param {double} startLongitude Longitude component of start location.
             *
             * @return {promise<Price Estimate Collection>}
             */
            getPriceEstimates: function (endLatitude, endLongitude, startLatitude, startLongitude) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (endLatitude === null || endLatitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `endLatitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (endLongitude === null || endLongitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `endLongitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (startLatitude === null || startLatitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLatitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (startLongitude === null || startLongitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLongitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/estimates/price';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'end_latitude': endLatitude,
                    'end_longitude': endLongitude,
                    'start_latitude': startLatitude,
                    'start_longitude': startLongitude
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'PriceEstimateCollection');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types: ?Unacceptable content type. Request resource as:' +
                                'application/json, etc.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Get a map with a visual representation of a Request.
             *
             * @param {string} requestId Unique identifier representing a Request.
             *
             * @return {promise<Request Map Response>}
             */
            getRequestMap: function (requestId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (requestId === null || requestId === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `requestId` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/requests/{request_id}/map';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'request_id': requestId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'RequestMapResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types, such as ?Unacceptable content type. Request resource as:' +
                                'application/json.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 409) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'A conflict needs to be resolved before the request can be made.',
                            errorCode: 409,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content or there are issues with a rider\'s user account.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * Cancel an ongoing Request on behalf of a rider.
             *
             * @param {string} requestId Unique identifier representing a Request.
             *
             * @return {promise<Void>}
             */
            deleteRequestCancel: function (requestId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (requestId === null || requestId === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `requestId` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/requests/{request_id}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'request_id': requestId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'DELETE',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 404) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Not found',
                            errorCode: 404,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types, such as ?Unacceptable content type. Request resource as:' +
                                'application/json.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 409) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'A conflict needs to be resolved before the request can be made',
                            errorCode: 409,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content or there are issues with a rider\'s user account.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The Request endpoint allows a ride to be requested on behalf of an Uber user given their desired
             * product, start, and end locations. Please review the Sandbox documentation on how to develop and test
             * against these endpoints without making real-world Requests and being charged.
             *
             * @param {RequestBody} body TODO: type description here
             *
             * @return {promise<Request>}
             */
            createRequest: function (body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (body === null || body === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `body` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/requests';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'content-type': 'application/json; charset=utf-8',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // Remove null values
                APIHelper.cleanObject(body);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.toJSON()
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'Request');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types, such as ?Unacceptable content type. Request resource as:' +
                                'application/json',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 409) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'A conflict needs to be resolved before the request can be made.',
                            errorCode: 409,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content or there are issues with a rider\'s user account.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited.',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            },
            /**
             * The Promotions endpoint returns information about the promotion that will be available to a new user
             * based on their activity's location. These promotions do not apply for existing users.
             *
             * @param {double} endLatitude Latitude component of end location.
             * @param {double} endLongitude Longitude component of end location.
             * @param {double} startLatitude Latitude component of start location.
             * @param {double} startLongitude Longitude component of start location
             *
             * @return {promise<Promotions Response>}
             */
            getPromotions: function (endLatitude, endLongitude, startLatitude, startLongitude) {

                //Create promise to return
                var _deffered = $q.defer();
                
                // validating required parameters
                var _missingArgs = false;
                if (endLatitude === null || endLatitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `endLatitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (endLongitude === null || endLongitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `endLongitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (startLatitude === null || startLatitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLatitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                } else if (startLongitude === null || startLongitude === undefined) {
                    _deffered.reject({
                        errorMessage: 'The parameter `startLongitude` is a required parameter and cannot be null.',
                        errorCode: -1
                    });
                    _missingArgs = true;
                }

                if (_missingArgs) {
                    return _deffered.promise;
                }

                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/v1/promotions';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'end_latitude': endLatitude,
                    'end_longitude': endLongitude,
                    'start_latitude': startLatitude,
                    'start_longitude': startLongitude
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'Authorization': 'Bearer ' + Configuration.oAuthAccessToken
                };

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    var parsed = _result.body;
                    parsed = BaseController.getObjectMapper().mapObject(parsed, 'PromotionsResponse');
                    _result.body = parsed;
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    if (_result.code === 404) {
                        _deffered.resolve(null);
                    } else if (_result.code === 400) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Malformed request.',
                            errorCode: 400,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 401) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unauthorized the request requires user authentication (not logged in).',
                            errorCode: 401,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 403) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Forbidden. Also used for unauthorized requests such as improper OAuth 2.0' +
                                'scopes or permissions issues.',
                            errorCode: 403,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 406) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Unacceptable content type. Client sent an accepts header for a content type' +
                                'which does not exist on the server. Body includes a list of acceptable' +
                                'content types, such as ?Unacceptable content type. Request resource as:' +
                                'application/json.',
                            errorCode: 406,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 409) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'A conflict needs to be resolved before the request can be made.',
                            errorCode: 409,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 422) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Invalid request. The request body is parse-able however with invalid' +
                                'content or there are issues with a rider\'s user account.',
                            errorCode: 422,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 429) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Too Many Requests. Rate limited',
                            errorCode: 429,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else if (_result.code === 500) {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'Internal Server Error.',
                            errorCode: 500,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    } else {
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    }
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
